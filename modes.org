** TODO "self (foo bar baz) do" === "foo bar baz"
** TODO "
** TODO "robot new (10 10 goto show) do" === "robot new this 10 10 goto show"
** TODO "robot new (:x :y goto show) do"
** TODO 
robot new this 
15 :x 20 :y
%x %y goto
show
self new

a robot with (hp weapons inventory) is a block 

to move a robot with (direction) does ... end

to fire a robot does ... end

** TODO auto-define words for all methods
** TODO auto-define words for fields, save/load value

** TODO word to define METHOD on SELF 
** TODO word to EXTEND another block 
** TODO keywords for :begin :end , words can seek in *program* to find keywords 

** TODO primitive words for accessing blocky console/block features

** TODO variables

** TODO white rounded rectangle background 
** TODO black text
** TODO attempt to blockify after each spacebar

** TODO notes on concatenative syntax
<dto> concatenative syntax is much simpler.  [11:02]
<dto> so imagine
<dto> :: ROBOT KICK BALL NEW SELF DROP  [11:04]
<dto> i.e. :: A B means define method B for object A  
<dto> then "BALL NEW" pushes a new ball onto the stack
<dto> SELF pushes the current robot
<dto> DROP makes the SELF drop the new BALL into the world
<dto> that sort of thing. with a good set of words to cover the Blocky
      featureset, this could be really much simpler than all the drag and drop
      i'd been doing in the Smalltalk Elements / MIT Scratch style of
      syntax. which is very mousey and nesty
** TODO define the block shell as an embeddable richtext block you can type in, emacs-style
** TODO arrows only nav within object---use control-arrow 
** TODO ??delete only deletes within an object---use control-delete to "break" the text of the previous block?xs?
** TODO black text w/o borders
** TODO ROBOT BALL NEW DROP
** TODO emulate natural language
** TODO come up with basic scenarios of things to be typed in to make a game
** TODO anything-el-style completion
* TODO forthmode. the stack is composed of blocks, and the current buffer line is the stack!
*** TODO can illustrate, showing execution on successive lines
*** http://c2.com/cgi/wiki?ColorForthQuickStart
*** http://concatenative.org/wiki/view/Concatenative%20language
*** prefix concat: http://sparist.github.com/Om/
*** http://concatenative.org/wiki/view/Concatenative%20language
* TODO http://c2.com/cgi/wiki?ForthMacro
http://grobots.sourceforge.net/
* VISUAL PROGRAMMING WITH THE KEYBOARD. visiprog does not require mouse.
*** dialog boxes are hard. instead use keyboard with auto-completion and suggestions like in emacs.
refactor text buffer widget to allow dynamic inline blockification of plain
english text, by default, new typed characters are in "text widget"
but this can be changed, as well as can the creation parameters for
the current block. like Bold Italic.
** TODO combine features from the Listener and text buffer into an emacsy thing
*** TODO simple concatenative syntax, possibly like Forth. look up colorforth, demo tools
*** TODO Review "THINKING FORTH"
*** TODO somehow incorporate red eevstars / linkdmode 
*** TODO but can add LISP parentheses at any time
** TODO [#B] use a macrolet to allow (next-method -->  (apply (get-next-method) ...)
** TODO [#B] Pretty sexy black rounded corner notifications
**** TODO notifications and a "notify" function 
**** TODO smile/frown emoticon status
**** TODO simple ok notification box
**** TODO generic question dialog box shortcut function
** TODO Review GoF design patterns
** TODO review other .org file ideas in repo
** TODO [#B] buttons for toggle pin,freeze


* Archived Entries
** DONE fundamental-mode is the basic mode
   CLOSED: [2013-01-28 Mon 11:17]
   :PROPERTIES:
   :ARCHIVE_TIME: 2013-01-28 Mon 12:17
   :ARCHIVE_FILE: ~/blocky/modes.org
   :ARCHIVE_CATEGORY: modes
   :ARCHIVE_TODO: DONE
   :END:
** DONE rename Worlds to Buffers
   CLOSED: [2013-01-28 Mon 11:17]
   :PROPERTIES:
   :ARCHIVE_TIME: 2013-01-28 Mon 12:17
   :ARCHIVE_FILE: ~/blocky/modes.org
   :ARCHIVE_CATEGORY: modes
   :ARCHIVE_TODO: DONE
   :END:
** DONE rename world%player to buffer%cursor <--- cursor receives messages
   CLOSED: [2013-01-28 Mon 12:16]
   :PROPERTIES:
   :ARCHIVE_TIME: 2013-01-28 Mon 12:17
   :ARCHIVE_FILE: ~/blocky/modes.org
   :ARCHIVE_CATEGORY: modes
   :ARCHIVE_TODO: DONE
   :END:
** DONE fix listener make-block-package issue
   CLOSED: [2013-01-29 Tue 10:07]
   :PROPERTIES:
   :ARCHIVE_TIME: 2013-01-29 Tue 10:08
   :ARCHIVE_FILE: ~/blocky/modes.org
   :ARCHIVE_CATEGORY: modes
   :ARCHIVE_TODO: DONE
   :END:
** DONE defining new words
   CLOSED: [2013-01-29 Tue 23:06]
   :PROPERTIES:
   :ARCHIVE_TIME: 2013-01-29 Tue 23:06
   :ARCHIVE_FILE: ~/blocky/modes.org
   :ARCHIVE_CATEGORY: modes
   :ARCHIVE_TODO: DONE
   :END:

** DONE executing single words
   CLOSED: [2013-01-29 Tue 23:06]
   :PROPERTIES:
   :ARCHIVE_TIME: 2013-01-29 Tue 23:06
   :ARCHIVE_FILE: ~/blocky/modes.org
   :ARCHIVE_CATEGORY: modes
   :ARCHIVE_TODO: DONE
   :END:
** DONE executing sequences of words (use the lisp reader)
   CLOSED: [2013-01-29 Tue 23:06]
   :PROPERTIES:
   :ARCHIVE_TIME: 2013-01-29 Tue 23:06
   :ARCHIVE_FILE: ~/blocky/modes.org
   :ARCHIVE_CATEGORY: modes
   :ARCHIVE_TODO: DONE
   :END:
*** DONE use lisp reader to read embedded lists that are pushed onto stack as a whole
    CLOSED: [2013-01-29 Tue 23:06]

** DONE dictionary of words
   CLOSED: [2013-01-29 Tue 23:06]
   :PROPERTIES:
   :ARCHIVE_TIME: 2013-01-29 Tue 23:06
   :ARCHIVE_FILE: ~/blocky/modes.org
   :ARCHIVE_CATEGORY: modes
   :ARCHIVE_TODO: DONE
   :END:

