#+TITLE: A programmer's guide to Blocky internals

* Overview of prototype-based programming

Blocky is built on an alternative view of object-orientation called
[[http://en.wikipedia.org/wiki/Prototype-based_programming][Prototype-based programming.]] Instead of partitioning the objects in
your program into classes that share inheritance relationships, the
objects in a prototype-based system inherit behavior and data directly
from each other through /cloning/. The cloning process takes an
existing object and creates a new object with a link to the
original---now called a "superobject"---from which it will inherit
methods and data fields. When a method is invoked (or a field is
referenced) and no local value is found, the superobject is checked
for a value, and then its superobject if any, and so on. Methods are
stored in fields, so if you want to replace a clone's method
definition with something else, just define the new method on the
clone, and the superobject's version will be hidden.

* A quick tour of prototypes in Blocky

** Defining a prototype

First we must define a prototype and name its fields:

: (define-prototype rectangle ()
:   x y width height)

We could also have provided initialization forms for the fields, and
documentation strings:

: (define-prototype rectangle ()
:   (x :initform 0 
:      :documentation "The x-coordinate of the rectangle's top-left corner.")
:   (y :initform 0 
:      :documentation "The y-coordinate of the rectangle's top-left corner.")
:   (width :documentation "The width of the rectangle.")
:   (height :documentation "The height of the rectangle."))

** Single inheritance, with :SUPER

And if there was a "shape" prototype, from which we would like
"rectangle" to inherit data and methods, we might have written:

: (define-prototype rectangle (:super shape)
:   (x :initform 0 
:      :documentation "The x-coordinate of the rectangle's top-left corner.")
:   (y :initform 0 
:      :documentation "The y-coordinate of the rectangle's top-left corner.")
:   (width :documentation "The width of the rectangle.")
:   (height :documentation "The height of the rectangle."))

** Cloning objects with NEW

The function NEW is used to create new objects from these
prototypes. Now we write an initializer, which is passed any creation
arguments at the time of cloning.

: (define-method initialize rectangle (&key width height)
:   (setf %width width)
:   (setf %height height))

So, now when you say:

: (let ((my-rectangle
:       (new rectangle :width 5 :height 12)))

The rectangle's initializer method is invoked with those arguments,
and a rectangle of the correct height and width is created.

Notice how field accesses can be written with the percent-sign prefix;
this works both for reading and for writing, so long as you use "setf"
for the latter. You can also get or set field values with the
underlying function FIELD-VALUE:
 
: (field-value :width my-rectangle)
: (setf (field-value :height my-rectangle) 7)

** Methods

Now we define a few methods, which are functions whose implicit first
argument is the object to operate on.

: (define-method area rectangle ()
:   (* %width %height))
: 
: (define-method print-me rectangle (&optional (stream t))
:   (format stream "height: ~A width: ~A area: ~A"
: 	  %height %width 
: 	  (area self)))

You can invoke them like ordinary functions, or use the SEND function.

: (defvar rect (new rectangle :width 10 :height 8))
:
: (print-me rect)

The result: 

: "height: 8 width: 10 area: 80"

Notice how within the body of PRINT-ME, the variable "self" refers to
the object being operated on. So it's easy to see why %foo expands to
(field-value :foo self)

** TODO Extended argument lists
** TODO Serialization

* Visual blocks

According to the [[http://en.wikipedia.org/wiki/Subtype_polymorphism][class-as-subtype]] school of thought, the problem
domain's objects must be partitioned into classes whose relations
determine which methods may be applied to a given object.

But as Alan Perlis famously said, "It is better to have 100 functions
operate on one data structure than 10 functions on 10 data
structures." That is, without the type-theoretic barriers imposed by
the doctrine of class-as-subtype, we find opportunities to mix and
match behaviors more freely, and individual methods will thus tend to
be useful on a wider range of objects. (Perlis describes it as "casual
cooperation", and this can be opposed to the more formal interactions
required of objects in something like SIMULA or Ada.)

In the Blocky language, everything is a Block, meaning that all
objects in the language inherit certain features from a common base,
whether they are in-game entities such as monsters or bullets, or
whether they are menus and buttons used to implement the user
interface, or still yet, musical cues to be triggered.

The purpose of this everything-is-a-Blockness is to mimic the
Lisp-nature, in which everything is a symbolic expression. 

Like Lisp expressions, all blocks have a computed value---some piece
of Lisp data considered as the result of the entire block. This value
is returned by the block method "EVALUATE". Also like Lisp
expressions, Blocks are designed to be composed with each other in a
tree-structure of arbitrary depth. A block's "child nodes" are stored
in a list called %INPUTS. (As in the prototypes example above, the
percent-sign prefix refers to a field value of the current object.)
The choice of the word "inputs" for the name of this field reflects
the idea of Blocks as nodes in a data-flow tree where each node
controls the computation of the results it needs from its child
blocks. Accordingly the computed values of the child blocks (if any)
are stored in a similar list called %RESULTS, and by default this
field is filled with the values of calling EVALUATE on the
corresponding child blocks in %INPUTS. How a given object implements
the EVALUATE method will influence whether and when that object's
%INPUTS are themselves evaluated, as with a Lisp macro.

Similarly, methods like DRAW can decide how, whether, and when to draw
a block's children; the method LAYOUT controls the placement and
sizing of a Block and its children, and HIT enables customization of
the way mouse movements and clicks are assigned to individual objects.
Input events (usually from the keyboard or joysticks) are handled by
the method ON-EVENT, and the choice of how to propagate events down
the tree may be determined dynamically at each and every node of the
tree, with full polymorphism available at all times to influence
dataflow, event handling, layout, positioning, graphical rendering,
and hit-testing. In other words, despite Blocks all having many
universal methods and properties in common, /nothing is sacred;/
everything can be redefined at every step, since the blocks themselves
control the computation.

Blocks do differ from Lisp expressions in being modeled somewhat
loosely after physical objects. Each block has a spatial position in
the form of XYZ coordinates, and possesses further attributes of
height, width, and depth.

Despite the Smalltalk influence, Blocky does not aim to be a
hermetically sealed environment. Instead, everything is fair
game---users are encouraged to import whatever devices and API's they
desire into the Blocksverse by writing new blocks that wrap the
functionality.

** TODO Document fonts, colors, dashes

** Basic blocks properties
*** define-block
*** xyz position / dimensions
*** LAYOUT
*** drawing, scaling, blending, opacity
**** WITH-STYLE, DRAW-PATCH
*** ON-EVENT and ON-TEXT-EVENT
*** ON-UPDATE
*** COPY and DEEP-COPY
*** pinning and visibility
*** serialization
*** MAKE-BLOCK and prebuilt data entry blocks
*** the Lisp Listener block
** Composing blocks into trees
*** INPUTS and RESULTS
*** parent and child relationships
** Doing things with blocks
*** Movement
*** ON-MOUSE-DOWN, ON-MOUSE-UP, ON-MOUSE-MOVE
*** ON-CLICK, ON-ALTERNATE-CLICK
*** EVALUATE and RECOMPILE
*** WITH-TARGET
*** WITH-SCRIPT

* Device input and output: console.lisp
** configuration variables (screen size, etc)
** keyboard state
** hooks and message logging
** input events
** joystick data
** configuring the GL viewport
** resources and IOF files
** projects
** images 
** text 



